% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/skewBART.R
\name{skewBART}
\alias{skewBART}
\title{Fit the skewBART model}
\usage{
skewBART(X, Y, test_X, hypers = NULL, opts = NULL)
}
\arguments{
\item{X}{NxP matrix of training data covariates.}

\item{Y}{Nx1 vector of training data response.}

\item{test_X}{MxP matrix of test data covariates}

\item{hypers}{A list of hyperparameters, typically constructed with the UHypers function}

\item{opts}{A list of options for running the Markov chain, typically constructed with the UOpts function.}
}
\value{
Returns a list with the following components:
\itemize{
  \item f_hat_train: posterior samples of function fit to the training data for each iteration of the chain
  \item f_hat_test: posterior samples of function fit to the testing data for each iteration of the chain
  \item y_hat_train: posterior samples of predicted outcome on the training data for each iteration of the chain; not equal to f_hat_train because the errors are not mean 0
  \item y_hat_test: posterior samples of function fit to the testing data for each iteration of the chain; not equal to f_hat_test because the errors are not mean 0
  \item sigma: posterior samples of the scale of the skew-normal distribution
  \item alpha: posterior samples of the skewness parameter of the skew-normal distribution
  \item tau: posterior samples of the standard deviation of the latent normal distribution in the parameter-expanded representation of the skew-normal; usually not of direct interest.
  \item lambda: posterior samples of the regression coefficient of the truncated normal variables in the parameter-expanded representation of the skew-normal distribution; usually not of direct interest.
  \item loo: the PSIS-loo computed with loo function in the loo package.
}
}
\description{
Fits the skewBART model and returns a list with function estimates and
estimates of the parameters of the skew-normal error distribution
}
\examples{
\donttest{

library(zeallot)
sim_fried <- function(N, P, alpha, sigma) {
  lambda <- alpha * sigma/sqrt(1+alpha^2)
  tau <- sigma/sqrt(1+alpha^2)
  X <- matrix(runif(N * P), nrow = N)
  mu <- 10 * sin(pi * X[,1] * X[,2]) + 20 * (X[,3] - 0.5)^2 + 10 * X[,4] + 5 * X[,5]
  Z <- abs(rnorm(N, mean=0, sd=1) )
  Y <- mu + lambda * Z + rnorm(N, mean=0, sd=sqrt(tau))
  EY <- mu + lambda * sqrt(2/pi)
  return(list(X = X, Y = Y, EY = EY, mu = mu, Z=Z, tau = tau, lambda = lambda))
}

## Traning dataset : n = 250 observations, P = 5 covariates, sigma = 2, alpha = 5 ----

set.seed(12345)
c(X,Y,EY,mu,Z,tau,lambda) \%<-\% sim_fried(250, 5, 5, 2)

## Test dataset : n = 100 observations, P = 5 covariates, sigma = 2, alpha = 5 ----

c(test_X,test_Y,test_EY,test_mu,test_Z,test_tau,test_lambda)  \%<-\% sim_fried(100, 5, 5 ,2)

## Fit ----

hypers <- UHypers(X, Y)
opts <- UOpts(num_burn = 5000, num_save = 5000)
fitted_skewbart <- skewBART(X, Y, test_X, hypers, opts)

## Traceplot of alpha samples and assessment of how well we recover the nonparametric function ----

par(mfrow = c(1,2))
plot(fitted_skewbart$alpha)
plot(colMeans(fitted_skewbart$f_hat_test), test_mu, pch = 2)
abline(a=0,b=1, col = 'green', lwd = 3)
}

}
